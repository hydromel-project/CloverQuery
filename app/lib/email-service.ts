import { Client } from '@microsoft/microsoft-graph-client';
import { ClientSecretCredential } from '@azure/identity';

interface EmailConfig {
  clientId: string;
  clientSecret: string;
  tenantId: string;
  from: string;
  recipient: string;
  enabled: boolean;
}

export class EmailService {
  private client: Client | null = null;
  private config: EmailConfig;

  constructor() {
    this.config = {
      clientId: process.env.EMAIL_CLIENT_ID || '',
      clientSecret: process.env.EMAIL_CLIENT_SECRET || '',
      tenantId: process.env.EMAIL_TENANT_ID || '',
      from: process.env.EMAIL_FROM || '',
      recipient: process.env.EMAIL_RECIPIENT || '',
      enabled: process.env.EMAIL_ENABLED === 'true'
    };
  }

  private async initializeClient(): Promise<void> {
    if (!this.config.enabled) {
      throw new Error('Email service is disabled');
    }

    if (!this.config.clientId || !this.config.clientSecret || !this.config.tenantId) {
      throw new Error('Missing Microsoft 365 configuration. Please check EMAIL_CLIENT_ID, EMAIL_CLIENT_SECRET, and EMAIL_TENANT_ID in .env');
    }

    try {
      // Create credentials for client credentials flow (app-only authentication)
      const credential = new ClientSecretCredential(
        this.config.tenantId,
        this.config.clientId,
        this.config.clientSecret
      );

      // Initialize Graph client with custom authentication
      this.client = Client.init({
        authProvider: async (done) => {
          try {
            const tokenResponse = await credential.getToken('https://graph.microsoft.com/.default');
            done(null, tokenResponse.token);
          } catch (error) {
            done(error, null);
          }
        }
      });

    } catch (error) {
      console.error('[Email] Failed to initialize Microsoft Graph client:', error);
      throw new Error('Failed to initialize email service');
    }
  }

  async sendPdfReport(
    pdfBuffer: Buffer,
    filter: string,
    totalCustomers: number,
    customRecipient?: string
  ): Promise<void> {
    if (!this.config.enabled) {
      throw new Error('Email service is disabled');
    }

    if (!this.client) {
      await this.initializeClient();
    }

    if (!this.client) {
      throw new Error('Failed to initialize email client');
    }

    try {
      const recipient = customRecipient || this.config.recipient;
      const timestamp = new Date().toISOString().split('T')[0];
      const filename = `Clover_Customers_${filter}_${timestamp}.pdf`;

      // Create email message
      const message = {
        subject: `Clover Customer Report - ${this.getFilterDisplayName(filter)} (${totalCustomers} customers)`,
        body: {
          contentType: 'html' as const,
          content: `
            <html>
              <body>
                <h2>Clover Customer Follow-up Report</h2>
                <p><strong>Report Type:</strong> ${this.getFilterDisplayName(filter)}</p>
                <p><strong>Total Customers:</strong> ${totalCustomers}</p>
                <p><strong>Generated:</strong> ${new Date().toLocaleDateString('en-CA')} at ${new Date().toLocaleTimeString('en-CA')}</p>
                <p>Please find the attached PDF report for customer follow-up actions.</p>
                <br>
                <p>This report was automatically generated by the Clover Query system.</p>
              </body>
            </html>
          `
        },
        toRecipients: [
          {
            emailAddress: {
              address: recipient
            }
          }
        ],
        attachments: [
          {
            '@odata.type': '#microsoft.graph.fileAttachment',
            name: filename,
            contentType: 'application/pdf',
            contentBytes: pdfBuffer.toString('base64')
          }
        ]
      };

      // Send email using the sender's mailbox (requires appropriate permissions)
      await this.client
        .api(`/users/${this.config.from}/sendMail`)
        .post({
          message
        });

      console.log(`[Email] Successfully sent PDF report to ${recipient}`);

    } catch (error: any) {
      console.error('[Email] Failed to send email:', error);
      
      // Provide more specific error messages
      if (error?.code === 'Forbidden') {
        throw new Error('Permission denied. Please ensure the application has Mail.Send permissions in Microsoft 365.');
      } else if (error?.code === 'NotFound') {
        throw new Error('Sender email address not found. Please check EMAIL_FROM configuration.');
      } else {
        throw new Error(`Failed to send email: ${error?.message || 'Unknown error'}`);
      }
    }
  }

  private getFilterDisplayName(filter: string): string {
    switch (filter) {
      case 'action-required': return 'Action Required';
      case 'expired': return 'Expired Cards';
      case 'expiring': return 'Expiring Soon';
      case 'no-cards': return 'No Payment Methods';
      default: return filter;
    }
  }

  isEnabled(): boolean {
    return this.config.enabled;
  }

  getRecipient(): string {
    return this.config.recipient;
  }
}

// Export singleton instance
export const emailService = new EmailService();